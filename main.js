(()=>{"use strict";class e{constructor(e,t){this.name=e,this.dueDate=t}setName(e){this.name=e}getName(){return this.name}setDate(e){this.dueDate=e}getDate(){return this.dueDate}}class t{constructor(e){this.name=e,this.tasks=[]}setName(e){this.name=e}getName(){return this.name}setTasks(e){this.tasks=e}getTasks(){return this.tasks}getTask(e){return this.tasks.find((t=>t.getName()===e))}addTask(t,s){this.tasks.push(new e(t,s))}deleteTask(e){this.tasks.splice(e,1)}}class s{constructor(){this.projects=[],this.projects.push(new t("Inbox")),this.projects.push(new t("Today")),this.projects.push(new t("This week"))}setProjects(e){this.projects=e}getProjects(){return this.projects}getProject(e){return this.projects.find((t=>t.getName()===e))}addProject(e){this.projects.push(new t(e))}deleteProject(e){this.projects.splice(e,1)}}class o{constructor(){this.currentProject=-1,this.currentTask=-1}saveTodoList(e){localStorage.setItem("todoList",JSON.stringify(e))}getTodoList(){const o=Object.assign(new s,JSON.parse(localStorage.getItem("todoList")));return o.setProjects(o.getProjects().map((e=>Object.assign(new t,e)))),o.getProjects().forEach((t=>t.setTasks(t.getTasks().map((t=>Object.assign(new e,t)))))),o}addProject(e){const t=this.getTodoList();t.addProject(e),this.saveTodoList(t)}deleteProject(e){const t=this.getTodoList();t.deleteProject(e),this.saveTodoList(t)}addTask(e,t,s){const o=this.getTodoList();o.getProject(e).addTask(t,s),this.saveTodoList(o)}deleteTask(e,t){const s=this.getTodoList();s.getProject(e).deleteTask(t),this.saveTodoList(s)}renameTask(e,t,s){const o=this.getTodoList();o.getProject(e).getTasks()[t].name=s,this.saveTodoList(o)}setTaskDate(e,t,s){const o=this.getTodoList();o.getProject(e).getTasks()[t].dueDate=s,this.saveTodoList(o)}setCurrentProject(e){this.currentProject=e}getCurrentProject(){return this.currentProject}setCurrentTask(e,t){this.currentProject=e,this.currentTask=t}resetCurrentTask(){this.currentTask=-1}getCurrentTask(){return this.currentTask}}(()=>{const e=new o;var t;t=e.getTodoList().getProject("Inbox").getName(),document.querySelector(".project-view").innerHTML=`\n        <div class="top">\n            <h1 class="project-name">${t}</h1>\n        </div>\n        <div class="task-list"></div>\n        <button class="add-task-btn">\n            <i class="fa-solid fa-plus"></i>\n            Add Task\n        </button>\n        <div class="form-div">\n            <form id="task-form" action="">\n                <label for="name">Name</label>\n                <input type="text" id="name" name="taskName" required>\n                <label for="date">Due Date</label>\n                <input type="date" id="date" name="dueDate" required>\n                <div class="form-btns">\n                    <button class="submit-btn" type="submit">Add</button>\n                    <button class="cancel-btn" type="button">Cancel</button>\n                </div>\n            </form>\n        </div>\n        `,e.setCurrentProject(0),console.log(e.getCurrentProject()),console.log(e.getTodoList().getProject("Inbox").getTasks());const s=()=>{const e=document.querySelector(".add-task-btn"),t=document.querySelector(".form-div"),s=document.querySelector(".submit-btn");e.classList.add("active"),t.classList.add("active"),s.textContent="Add"},r=()=>{const e=document.querySelector(".add-task-btn"),t=document.querySelector(".form-div"),s=document.querySelector("#task-form");e.classList.remove("active"),t.classList.remove("active"),s.reset()},n=t=>{t.preventDefault();const s=document.querySelector(".project-name").textContent,o=document.querySelector("#name").value,n=document.querySelector("#date").value,a=document.querySelector(".submit-btn"),i=document.querySelector("#task-form"),d=e.getTodoList().getProject(s).getTasks().some((e=>e.name.toUpperCase()===o.toUpperCase()));if("Add"===a.textContent){if(d)return void alert("Tasks must have different names!");e.addTask(s,o,n)}else{const t=e.getCurrentTask(),o=i.elements.taskName.value,r=i.elements.dueDate.value;e.renameTask(s,t,o),e.setTaskDate(s,t,r),e.resetCurrentTask()}r(),c()},a=t=>{if(e.setCurrentTask(e.getCurrentProject(),t.target.parentNode.id),console.log(e.getCurrentTask()),t.target.classList.contains("fa-x")){const s=document.querySelector(".project-name").textContent;e.deleteTask(s,t.target.parentNode.id),c()}if(t.target.classList.contains("fa-pen-to-square")){const o=document.querySelector(".submit-btn");(t=>{const s=document.querySelector("#name"),o=document.querySelector("#date");s.value=e.getTodoList().getProjects()[e.getCurrentProject()].getTasks()[t].name,o.value=e.getTodoList().getProjects()[e.getCurrentProject()].getTasks()[t].dueDate})(t.target.parentNode.id),s(),o.textContent="Edit"}},c=()=>{const t=document.querySelector(".project-name").textContent,s=document.querySelector(".task-list");s.innerHTML="",e.getTodoList().getProject(t).getTasks().forEach(((e,t)=>{s.innerHTML+=`\n                <button class="task" id=${t}>\n                         <i class="fa-solid fa-list-check"></i>\n                         <p class="task-name">${e.name}</p>\n                         <p class="task-date">${e.dueDate}</p>\n                         <i class="fa-solid fa-pen-to-square"></i>\n                         <i class="fa-solid fa-x"></i>\n                 </button>`}))},i=()=>{const e=document.querySelector("#nav-form"),t=document.querySelector(".new-project");e.classList.add("active"),t.classList.add("active")},d=()=>{const e=document.querySelector("#nav-form"),t=document.querySelector(".new-project");e.classList.remove("active"),t.classList.remove("active"),e.reset()},u=t=>{t.preventDefault();const s=document.querySelector("#projectName").value;e.addProject(s),console.log(e.getTodoList().projects),d(),g()},l=t=>{if(t.target.classList.contains("fa-x"))e.deleteProject(t.target.parentNode.id),g(),k("Inbox"),e.setCurrentProject(0),c();else{const s=t.target.childNodes[3].textContent;k(s),e.setCurrentProject(t.target.id),c()}},m=t=>{const s=t.target.childNodes[1].textContent;k(s),e.setCurrentProject(t.target.id),c()},g=()=>{const t=document.querySelector(".project-list");t.innerHTML="",e.getTodoList().projects.forEach(((e,s)=>{"Inbox"!==e.name&&"Today"!==e.name&&"This week"!==e.name&&(t.innerHTML+=`               \n                <button class="project" id=${s}>\n                    <i class="fa-solid fa-list-check"></i>\n                    <p class="task-name">${e.name}</p>\n                    <i class="fa-solid fa-x"></i>\n                </button>`)}))},k=t=>{(t=>{document.querySelector(".top").innerHTML=`<h1 class="project-name">${t}</h1>`,"Today"===t||"This week"===t?document.querySelector(".add-task-btn").classList.add("active"):document.querySelector(".add-task-btn").classList.remove("active"),e.getTodoList().getProject(t).getTasks()})(t)};(()=>{const e=document.querySelector(".add-task-btn"),t=document.querySelector(".cancel-btn"),o=document.querySelector("#task-form"),c=document.querySelector(".task-list");e.addEventListener("click",s),t.addEventListener("click",r),o.addEventListener("submit",n),c.addEventListener("click",a)})(),c(),(()=>{const e=document.querySelector(".new-project"),t=document.querySelector(".cancel-project"),s=document.querySelector("#nav-form"),o=document.querySelector(".project-list"),r=document.querySelector(".default-options");e.addEventListener("click",i),t.addEventListener("click",d),s.addEventListener("submit",u),o.addEventListener("click",l),r.addEventListener("click",m)})(),g()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,