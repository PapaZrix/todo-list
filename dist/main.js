(()=>{"use strict";class t{constructor(t,e){this.name=t,this.dueDate=e}setName(t){this.name=t}getName(){return this.name}setDate(t){this.dueDate=t}getDate(){return this.dueDate}}class e{constructor(t){this.name=t,this.tasks=[]}setName(t){this.name=t}getName(){return this.name}setTasks(t){this.tasks=t}getTasks(){return this.tasks}getTask(t){return this.tasks.find((e=>e.getName()===t))}addTask(e,s){this.tasks.push(new t(e,s))}deleteTask(t){this.tasks.splice(t,1)}}class s{constructor(){this.projects=[],this.projects.push(new e("Inbox")),this.projects.push(new e("Today")),this.projects.push(new e("This week"))}setProjects(t){this.projects=t}getProjects(){return this.projects}getProject(t){return this.projects.find((e=>e.getName()===t))}addProject(t){this.projects.push(new e(t))}deleteProject(t){this.projects.splice(t,1)}}class o{constructor(){this.currentProject=-1,this.currentTask=-1}saveTodoList(t){localStorage.setItem("todoList",JSON.stringify(t))}getTodoList(){const o=Object.assign(new s,JSON.parse(localStorage.getItem("todoList")));return o.setProjects(o.getProjects().map((t=>Object.assign(new e,t)))),o.getProjects().forEach((e=>e.setTasks(e.getTasks().map((e=>Object.assign(new t,e)))))),o}addProject(t){const e=this.getTodoList();e.addProject(t),this.saveTodoList(e)}deleteProject(t){const e=this.getTodoList();e.deleteProject(t),this.saveTodoList(e)}addTask(t,e,s){const o=this.getTodoList();o.getProject(t).addTask(e,s),this.saveTodoList(o)}deleteTask(t,e){const s=this.getTodoList();s.getProject(t).deleteTask(e),this.saveTodoList(s)}renameTask(t,e,s){const o=this.getTodoList();o.getProject(t).getTasks()[e].name=s,this.saveTodoList(o)}setTaskDate(t,e,s){const o=this.getTodoList();o.getProject(t).getTasks()[e].dueDate=s,this.saveTodoList(o)}setCurrentProject(t){this.currentProject=t}getCurrentProject(){return this.currentProject}setCurrentTask(t,e){this.currentProject=t,this.currentTask=e}resetCurrentTask(){this.currentTask=-1}getCurrentTask(){return this.currentTask}}(()=>{const t=new o;var e;e=t.getTodoList().getProject("Inbox").getName(),document.querySelector(".project-view").innerHTML=`\n        <div class="top">\n            <h1 class="project-name">${e}</h1>\n        </div>\n        <div class="task-list"></div>\n        <button class="add-task-btn">\n            <i class="fa-solid fa-plus"></i>\n            Add Task\n        </button>\n        <div class="form-div">\n            <form id="task-form" action="">\n                <label for="name">Name</label>\n                <input type="text" id="name" name="taskName" required>\n                <label for="date">Due Date</label>\n                <input type="date" id="date" name="dueDate" required>\n                <div class="form-btns">\n                    <button class="submit-btn" type="submit">Add</button>\n                    <button class="cancel-btn" type="button">Cancel</button>\n                </div>\n            </form>\n        </div>\n        `,t.setCurrentProject(0),console.log(t.getCurrentProject());const s=()=>{const t=document.querySelector(".add-task-btn"),e=document.querySelector(".form-div"),s=document.querySelector(".submit-btn");t.classList.add("active"),e.classList.add("active"),s.textContent="Add"},r=()=>{const t=document.querySelector(".add-task-btn"),e=document.querySelector(".form-div"),s=document.querySelector("#task-form");t.classList.remove("active"),e.classList.remove("active"),s.reset()};(()=>{const t=document.querySelector(".add-task-btn"),e=document.querySelector(".cancel-btn");t.addEventListener("click",s),e.addEventListener("click",r)})()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,